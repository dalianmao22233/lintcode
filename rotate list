还是快慢指针。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            length ++;
            head = head.next;
        }
        return length;
    }
    
    public ListNode rotateRight(ListNode head, int n) {
        if (head == null) {
            return null;
        }
        ListNode node = head;//这里出错了，不应该直接用head作为参数，会改变链表结构。传址了。
        int length = getLength(node);
        n = n % length;//有可能n太大，这样需要进行计算得到合适的n值。
        if(n == 0){//记得加上！考虑这种情况
            return head;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        
        ListNode fast = head, slow = head;
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        //与顺序无关。
        fast.next = head;//Link old Head to the end, form circle
        dummy.next = slow.next;// Link slow.next as new head. tail should be end point.
        slow.next = null;// add null to end point tail
        return dummy.next;
    }
}
