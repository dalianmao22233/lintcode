最快解法： 用count记录每个节点的左子树节点个数：
（follow up： time:O(height of tree), space:O(1)）
public class Solution {
    private int count = 0;
    private int res = 0;
    public int kthSmallest(TreeNode root, int k) {
        helper(root, k);
        return res;
    }
    private void helper(TreeNode root, int k) {
        if(root == null || count >= k) return;
        helper(root.left, k);
        count++;
        if(count == k) res = root.val;
        helper(root.right, k);
    }
}
注意二叉搜索树的特性，左子树  所  有  点  的值都小于根节点，右子树的左右值都大于根节点。
采用中序遍历（左 -> 根 -> 右）即可以递增顺序访问BST中的节点，从而得到第k小的元素，时间复杂度O(k)
（最优时间复杂度应该是O(BST的高度)， 
BST的特性是，如果按照中序排列，得到的递增序；所以可以使用一个stack进行中序遍历，直到找到第K个元素； ）
1. 好理解，Inorder， Time Complexity - O(k)， Space Complexity - O(k)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root == null) return 0;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode node = root;
        while(!stack.isEmpty() || node != null) {
            while(node != null) {
                stack.push(node);
                node = node.left;
            }
            TreeNode tmp = stack.pop();
            k--;
            if(k == 0) return tmp.val;
          
            node = tmp.right;
            
            
        }
        return 0;
         
    }
    
}
2. follow up 问题
/*
 * Follow up:
  * What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?
  * How would you optimize the kthSmallest routine?
  * Hint:
  * 1. Try to utilize the property of a BST.
  * 2. What if you could modify the BST node's structure?
  * 3. The optimal runtime complexity is O(height of BST).
  * Solution:
  * Change the structure of TreeNode, add the number of left child(cnt_left_child) and the number of right child(cnt_right_child);
  * Insert/ delete a node of BST, update the cnt_left_child and cnt_right_child, time complexity: O(height of the tree);
  * Query the Kth smallest, just count the cnt_left_child and cnt_right_child, time complexity: O(height of the tree);
  */
解法一：好懂，对于每个节点root， 计算以它为根节点的树的节点数s
若s==k,返回root.val；
若s>k, 在root左子树中找第K小；
若s<k, 在root右子树找第(k-s)小;
  public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int left = helper(root.left);
        if(left+1 == k) return root.val;
        else if(left+1 < k) return kthSmallest(root.right, k-left-1);
        else return kthSmallest(root.left, k);
        
    }
    public int helper(TreeNode root) {
        if( root == null) return 0;
        int sum = helper(root.left) + helper(root.right) + 1;
        return sum;
    }
}
解法二：
public int kthSmallest(TreeNode root, int k) {
   PriorityQueue<Integer> queue = new PriorityQueue<>(k, Collections.reverseOrder());

    kthHelper(queue, root, k);
    return queue.peek();
}

private void kthHelper(PriorityQueue<Integer> queue, TreeNode root, int k) {

    if (root == null || queue.size() >= k) return;

   kthHelper(queue, root.left, k);
    if (queue.size() >= k) return;

    queue.add(root.val);

    if (root.right != null) kthHelper(queue, root.right, k);
}
