http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/
vTop, Left, and Top Left decides the size of the square. If all of them are same, then the size of
square increases by 1. If they're not same, they can increase by 1 to the minimal square. 
If you take an example and work it out, it'll be much easier to understand when it comes to 
dynamic programing. :)

public class Solution {
    public int maximalSquare(char[][] a) {
      if(a.length == 0) return 0;
      int m = a.length, n = a[0].length, result = 0;
      int[][] b = new int[m+1][n+1];
      for (int i = 1 ; i <= m; i++) {
          for (int j = 1; j <= n; j++) {
              if(a[i-1][j-1] == '1') {
                  b[i][j] = Math.min(Math.min(b[i][j-1] , b[i-1][j-1]), b[i-1][j]) + 1;
                  result = Math.max(b[i][j], result); // update result
              }
          }
      }
      return result*result;
  }
}
