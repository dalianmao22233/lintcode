Here is the step of my solution:
Build a minHeap of elements from the first row.
Do the following operations k-1 times :
Every time when you poll out the root(Top Element in Heap), you need to know the row number and column number of that 
element(so we can create a tuple class here), replace that root with the next element from the same column.
After you finish this problem, thinks more :

For this question, you can also build a min Heap from the first column, and do the similar operations as above.
(Replace the root with the next element from the same row)
What is more, this problem is exact the same with Leetcode373 Find K Pairs with Smallest Sums, I use the same code 
which beats 96.42%, after you solve this problem, you can check with this link:
https://discuss.leetcode.com/topic/52953/share-my-solution-which-beat-96-42

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Tuple> pq = new PriorityQueue<Tuple>();
        int bound = matrix.length < k ? matrix.length : k;
        for(int j = 0; j < bound; j++)  {
            pq.offer(new Tuple(0, j, matrix[0][j]));
        }
    
        for(int i = 0; i < k-1; i++) {
            Tuple t = pq.poll();
            // System.out.println("t: " + t.x+", " + t.y+", " + t.val );
            
            if(t.x == n-1) continue;
            pq.offer(new Tuple(t.x+1, t.y, matrix[t.x+1][t.y]));
            // System.out.println("pq: " + (t.x+1)+ ", "+ t.y+", " +  matrix[t.x+1][t.y]);
        }
        return pq.poll().val;
    }
}

class Tuple implements Comparable<Tuple> {
    int x, y, val;
    public Tuple (int x, int y, int val) {
        this.x = x;
        this.y = y;
        this.val = val;
    }
    
    @Override
    public int compareTo (Tuple that) {
        return this.val - that.val;
    }
}


复杂度更高：
   PriorityQueue<Integer> pq= new PriorityQueue(k, Collections.reverseOrder());
    
    for(int i=0;i<matrix.length;i++){
        for(int j=0;j<matrix[0].length;j++){
            if(pq.size()<k)
                pq.add(matrix[i][j]);
            else{
                int temp=pq.peek();
                if(temp>matrix[i][j]){
                    pq.poll();
                    pq.offer(matrix[i][j]);
                }
            }
        }
    }
    return pq.poll();
}
二分搜索：
还可参考:
http://www.guoting.org/leetcode/leetcode-378-kth-smallest-element-in-a-sorted-matrix/
http://www.guoting.org/leetcode/leetcode-378-kth-smallest-element-in-a-sorted-matrix/
不太懂。
public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
		int n = matrix.length;
		int L = matrix[0][0], R = matrix[n - 1][n - 1];
		while (L < R) {
			int mid = L + ((R - L) >> 1);
			int temp = 0;
			for (int i = 0; i < n; i++) temp += binary_search(matrix[i], n, mid);
			if (temp < k) L = mid + 1;
			else R = mid;
		}
		return L;
	}
	
	private int binary_search(int[] row,int R,int x){
	    int L = 0;
	    while (L < R){
	        int mid = (L + R) >> 1;
	        if(row[mid] <= x) L = mid + 1;
	        else R = mid;
	    }
	    return L;
	}
}
