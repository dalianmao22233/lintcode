这是一道非常综合的题目，主要应用在操作系统的资源管理中。
按照题目要求，要实现get和set功能，为了满足随机存储的需求我们首先想到的一般是用数组，如果用链表会有O(n)的访问时间。然而他又有另一个条件
就是要维护least used的队列，也就是说经常用的放在前面，用的少的放在后面。这样当资源超过cache的容积的时候就可以把用得最少的资源删掉。
这就要求我们要对节点有好的删除和插入操作，这个要求又会让我们想到用链表，因为数组的删除和插入是O(n)复杂度的。
那么我们能不能维护一个数据结构使得访问操作和插入删除操作都是O(1)复杂度的呢？答案是肯定的。这个数据结构比较复杂，是用一个hash表加上一个
双向链表来实现。基本思路是这样的，用一个hash表来维护结点的位置关系，也就是hash表的key就是资源本身的key，value是资源的结点
（包含key和value的信息）。然后把结点维护成一个双向链表构成的队列，这样子如果我们要访问某一个结点，那么可以通过hash表和key来找到结点，
从而取到相应的value。而当我们想要删除或者插入结点时，我们还是通过hash表找到结点，然后通过双向链表和队列的尾结点把自己删除同时插入到队尾。
通过hash表访问结点我们可以认为是O(1)的操作（假设hash函数足够好），然后双向链表的插入删除操作也是O(1)的操作。如此我们便实现了用O(1)
时间来完成所有LRU cache的操作。空间上就是对于每一个资源有一个hash表的的项以及一个对应的结点（包含前后指针和资源的<key, value>）。

我的：
这道题有点奇怪，反着想：
get:如果没有，返回-1， 如果有，返回key, node move to tail
set:如果有，直接返回，如果没有，首先看capacity满没有，如果满了，移走头部，新节点插到尾部，如果没满，新节点插到尾部。
这样尾部的新节点会慢慢移到前面。
其实正着也是一样。先记这个吧。
public class LRUCache {
    private Map<Integer, Node> map;
    private Node head, tail;
    private int capacity = 0;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.map = new HashMap<>();
    }
    
    public int get(int key) {
        if (!map.containsKey(key)) return -1;
        Node node = map.get(key);
        moveToTail(node);
        return node.val;
    }
    
    public void set(int key, int value) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            node.val = value;
            moveToTail(node);
        } else {
            if (map.size() == capacity) {
                map.remove(head.key);
                head = head.next;
                if (head != null) head.prev = null;     
                else tail = null;               
            }
            Node node = new Node(key, value); //注意这里不能写成else.这步无论是否超出capacity都要执行，因为是插入新节点。
            moveToTail(node);
            map.put(key, node);
        }
    }
    
    private void moveToTail(Node node) {
        if (head == null && tail == null) {
            head = node;
            tail = node;
            return;
        }
        
        if (map.containsKey(node.key)) {
            if (node == tail) return;  // node is tail
            
            if (node == head) {    // node is head;
                head = head.next;
                head.prev = null;
            } else {
                node.prev.next = node.next;
                node.next.prev = node.prev;
            }    
        }
        
        node.prev = tail;
        tail.next = node;
        node.next = null;//这句和下一句可以写反。
        tail = node;
    }
    
    private class Node {
        int key;
        int val;
        Node prev;
        Node next;
        
        public Node(int k, int v) {
            this.key = k;
            this.val = v;
        }
    }
}

实现的时候还是有很多细节的，因为我们不经常使用双向链表，插入删除操作要维护前后指针，并且同时要维护成队列，增加了许多注意点。
这道题是一道很实际的题目，思路和数据结构都是很适合面试的题目，但是代码量有些偏大，所以一般只在onsite的时候有可能遇到，
可能也不会让你完整地写出全部代码，主要还是讲出维护的数据结构和各种操作复杂度的分析。

以下是石坚发的代码，好懂：
class LRUCache{
    struct Node{
        int val;
        int key;
        Node* next;
        Node* prev;
        Node(int k, int v): key(k), val(v){}
    };
    int maxSize;
    Node* head;
    Node* tail;
    unordered_map<int, Node*> keyToNode;
    
    void insertToEnd(int key, int value)
    {
        if(isFull() || keyToNode.count(key) != 0)
        {
            return;
        }
        Node* nd = new Node(key, value);
        keyToNode[key] = nd;
        if(!head)
        {
            head = tail = nd;
        }
        else
        {
            tail->next = nd;
            nd->prev = tail;
            tail = tail->next;
        }
    }
    void removeHead()
    {
        if(!head)
        {
            return;
        }
        keyToNode.erase(head->key);
        if(head == tail)
        {
            head = tail = NULL;
        }
        else
        {
            head = head->next;
            head->prev = NULL;
        }
    }
    
    void moveToEnd(int key)
    {
        if(keyToNode.count(key) == 0 || keyToNode[key] == tail)
        {
            return;
        }
        Node* nd = keyToNode[key];
        if(nd == head)
        {
            head = head->next;
            head->prev = NULL;
        }
        else
        {
            nd->prev->next = nd->next;
            nd->next->prev = nd->prev;
        }
        tail->next = nd;
        nd->prev = tail;
        nd->next = NULL;
        tail = tail->next;
    }
public:
    LRUCache(int capacity) 
    {
        maxSize = capacity;
        head = NULL;
        tail = NULL;
        keyToNode.clear();
    }
    
    int get(int key) 
    {
        if(keyToNode.count(key) == 0)
        {
            return -1;
        }
        moveToEnd(key);
        return keyToNode[key]->val;
    }
    
    void set(int key, int value) 
    {
        if(get(key) != -1)
        {
            keyToNode[key]->val = value;
            return;
        }
        if(isFull())
        {
            removeHead();
        }
        insertToEnd(key, value);
    }
    bool isFull()
    {
        return keyToNode.size() >= maxSize;
    }
};
