题意：一个只包含字符0和1的二维数组，找出里面不相邻的只包含1的块的个数。

思路：DFS、BFS。只要遍历一遍，碰到一个1，就把它周围所有相连的1都标记为非1，
这样整个遍历过程中碰到的1的个数就是所求解。

【DFS、递归】
public class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int res = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] != '1') continue;
                res++;//这里+1是因为，如果dfs一直探查，遇到了boundary，即dfs里的if，就会停止，此时这就算是一个岛了。因为不能再污染。
                dfs(grid, i, j);
            }
        }
        return res;
        
    }
    private void dfs(char[][] grid, int i, int j) {
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) return;//注意条件。
        if(grid[i][j] == '1') {
            
            grid[i][j] = '2';
            dfs(grid, i-1, j);
            dfs(grid, i+1, j);
            dfs(grid, i, j+1);
            dfs(grid, i, j-1);
        }
        
    }
}

bfs解法：
public class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int rowNum = grid.length, colNum = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        int count = 0;
        
        for (int i = 0; i < rowNum; i++) {
            for (int j = 0; j < colNum; j++) {
                if (grid[i][j] == '1') {
                    q.offer(new int[] {i, j});
                    while (!q.isEmpty()) {
                        int[] location = q.poll();
                        int k = location[0], l = location[1];
                        if (grid[k][l] != '1') continue;
                        grid[k][l] = 0;
                        if (k - 1 >= 0) q.offer(new int[] {k - 1, l});
                        if (k + 1 <= rowNum - 1) q.offer(new int[] {k + 1, l});
                        if (l - 1 >= 0) q.offer(new int[] {k, l - 1});
                        if (l + 1 <= colNum - 1) q.offer(new int[] {k, l + 1});
                    }
                    count++;
                }
            }
        }
        return count;
    }
}

Union-Find：

Time is O(m*n*log(k)).

public int numIslands(char[][] grid) {
    if(grid==null || grid.length==0 || grid[0].length==0)
        return 0;
 
    int m = grid.length;
    int n = grid[0].length;
 
    int[] dx={-1, 1, 0, 0};
    int[] dy={0, 0, -1, 1};
 
    int[] root = new int[m*n];
 
    int count=0;
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            if(grid[i][j]=='1'){
                root[i*n+j] = i*n+j;            
                count++;
            }
        }
    }
 
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            if(grid[i][j]=='1'){
                for(int k=0; k<4; k++){
                    int x = i+dx[k];
                    int y = j+dy[k];
 
                    if(x>=0&&x<m&&y>=0&&y<n&&grid[x][y]=='1'){
                        int cRoot = getRoot(root, i*n+j);
                        int nRoot = getRoot(root, x*n+y);
                        if(nRoot!=cRoot){
                            root[cRoot]=nRoot; //update previous node's root to be current
                            count--;
                        }
 
                    }
                }
            }
        }
    }
 
    return count;
}
 
public int getRoot(int[] arr , int i){
    while(arr[i]!=i){
        i = arr[arr[i]];
    }
 
    return i;
}
