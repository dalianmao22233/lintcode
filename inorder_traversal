Inorder Traversal
第一次：
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if(root == null) return res;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode cur = root;
        while(cur != null || !stack.empty()) {
            while(cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            res.add(cur.val);
            cur = cur.right;
        }
        return res;
        
        
    }
}
第二次：
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Inorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();

        if(root == null){
            return result;
        }
        TreeNode curt = root;
        while(true){
            while(curt != null){
                stack.push(curt);
                curt = curt.left;//顺着左边一直向下，
                //也就是所有根节点，左孩子都进栈了
                //出了while意味着curt=null；所以pop在前，add在后。
            }
            if(stack.isEmpty()){
                break;
            }
            curt = stack.pop();
            result.add(curt.val);
            if(curt != null){//必须不能是curt.right != null, 如果这样会报错。因为curt.right可能是空但curt不是空。
            //如果curt.right = null && curt != null, curt = curt.right, 此时curt = null, 进入下一次循环的时候进不去
            //while，所以就继续stack.pop, 才能回溯到上一个节点继续找右孩子。
                curt = curt.right;//回溯找到右孩子，下次循环进栈
            }
        }
        
        return result;
    }
}
