二维矩阵求Range Sum。这题我们也是用DP，不过dp的方法是: dp[i][j]等于从坐标matrix[0][0]到matrix[i - 1][j - 1]中所有元素的和。 
这样我们就可以用中小学时计算矩形重叠面积的方法来计算出我们想要的结果。
http://buttercola.blogspot.com/2015/12/leetcode-range-sum-query-2d-immutable.html
Construct a 2D array sums[row+1][col+1]
(notice: we add additional blank row sums[0][col+1]={0} and blank column sums[row+1][0]={0} to remove the edge case checking),
so, we can have the following definition
sums[i+1][j+1] represents the sum of area from matrix[0][0] to matrix[i][j]
To calculate sums, the ideas as below

+-----+-+-------+     +--------+-----+     +-----+---------+     +-----+--------+
|     | |       |     |        |     |     |     |         |     |     |        |
|     | |       |     |        |     |     |     |         |     |     |        |
+-----+-+       |     +--------+     |     |     |         |     +-----+        |
|     | |       |  =  |              |  +  |     |         |  -  |              |
+-----+-+       |     |              |     +-----+         |     |              |
|               |     |              |     |               |     |              |
|               |     |              |     |               |     |              |
+---------------+     +--------------+     +---------------+     +--------------+

   sums[i][j]      =    sums[i-1][j]    +     sums[i][j-1]    -   sums[i-1][j-1]   +  

                        matrix[i-1][j-1]
So, we use the same idea to find the specific area's sum.
+---------------+   +--------------+   +---------------+   +--------------+   +--------------+
|               |   |         |    |   |   |           |   |         |    |   |   |          |
|   (r1,c1)     |   |         |    |   |   |           |   |         |    |   |   |          |
|   +------+    |   |         |    |   |   |           |   +---------+    |   +---+          |
|   |      |    | = |         |    | - |   |           | - |      (r1,c2) | + |   (r1,c1)    |
|   |      |    |   |         |    |   |   |           |   |              |   |              |
|   +------+    |   +---------+    |   +---+           |   |              |   |              |
|        (r2,c2)|   |       (r2,c2)|   |   (r2,c1)     |   |              |   |              |
+---------------+   +--------------+   +---------------+   +--------------+   +--------------+
Time Complexity - O(n2)， Space Complexity - O(n2)。
第二次：
public class NumMatrix {
    private int[][] sum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0) return;
        if(matrix[0] == null || matrix[0].length == 0) return;
        sum = new int[matrix.length+1][matrix[0].length+1];
        for(int i = 0; i < matrix.length;  i++) { //见笔记，先初始化边界，这样+1的边界是方便后面处理的，其实没卵用
            sum[i+1][0] = sum[i][0] + matrix[i][0];
        }
        for(int j = 0; j < matrix[0].length;  j++) {
            sum[1][j+1] = sum[0][j] + matrix[0][j];
        }
        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                sum[i+1][j+1] = sum[i][j+1] + sum[i+1][j] + matrix[i][j] - sum[i][j];//这一步建立dp矩阵，详细解释看笔记
            }
        } 
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        if(row1 > row2 && col1 < col2) return -1;
        return sum[row2+1][col2+1] - sum[row1][col2+1] - sum[row2+1][col1] + sum[row1][col1];
    }
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);
第一次：
public class NumMatrix {
    private int[][] sum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0) {
            return;
        }
        int rowNum = matrix.length, colNum = matrix[0].length;
        sum = new int[rowNum + 1][colNum + 1];
        
        for(int i = 1; i < sum.length; i++) {
            for(int j = 1; j < sum[0].length; j++) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
            return sum[row2 + 1][col2 + 1] - sum[row1][col2 + 1] - sum[row2 + 1][col1] + sum[row1][col1];
    }
}
