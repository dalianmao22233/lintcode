第一次：（我的）
public class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums == null || nums.length == 0) return 0;
        int start= 0 , end = nums.length-1;
        while(start+1 < end) {
            int mid = start + (end-start)/2;
            if(nums[mid] < target) {
                start = mid;
            } else if(nums[mid] > target) {
                end = mid;
            } else {
                return mid;
            }
        }
        
        if(nums[start] < target && target < nums[end]) return end;
        else if(nums[start] == target) return start;
        else if(nums[end] == target) return end;
        else if(target > nums[end]) return end+1;
        else if(target < nums[start]) return start;//这里注意一个例子[2],0， 此时不能返回start-1,应该是start;
        else return 0;
    }
}
这道题就是二分搜索，但是注意边界条件，第一次做虽然成功了，但是后面这个边界想的不太清楚导致运行了多次。
九章的比较好：
public class Solution {
    public int searchInsert(int[] A, int target) {
        if (A == null || A.length == 0) {
            return 0;
        }
        int start = 0, end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (A[start] >= target) {
            return start;
        } else if (A[end] >= target) {
            return end;
        } else {
            return end + 1;
        }
    }
}
最后这部分判断写得很简练。学习。
