仔细想一想其实Push最好能是O(1)，因为这个用得应该最频繁。 下面做法主要就是在push的时候把当前值放在队尾，以前的值我们重新放在队尾。

Time Complexity - Push - O(n)， Pop - O(1)， Peek - O(1)，  isEmpty- O(1)

class MyStack {
    // Push element x onto stack.
    Queue<Integer> q = new LinkedList<Integer>();
    public void push(int x) {
        q.offer(x);
        for (int i = 0; i < q.size()-1; i++) {
            q.offer(q.poll());
        }
    }

    // Removes the element on top of the stack.
    public void pop() {
        q.poll();
    }

    // Get the top element.
    public int top() {
        return q.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return q.isEmpty();
    }
}
