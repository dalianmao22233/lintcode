这道题让我们求出现次数大于n/3的众数，而且限定了时间和空间复杂度，那么就不能排序，也不能使用哈希表，这么苛刻的限制条件只有一种方法能解了，
那就是摩尔投票法 Moore Voting，这种方法在之前那道题Majority Element 求众数中也使用了。题目中给了一条很重要的提示，让我们先考虑可能
会有多少个众数，经过举了很多例子分析得出，任意一个数组出现次数大于n/3的众数最多有两个。
那么有了这个信息，我们使用投票法的核心是找出两个候选众数进行投票，需要两遍遍历，第一遍历找出两个候选众数，第二遍遍历重新投票验证这两个
候选众数是否为众数即可，选候选众数方法和前面那篇Majority Element 求众数一样，由于之前那题题目中限定了一定会有众数存在，故而省略了验证
候选众数的步骤，这道题却没有这种限定，即满足要求的众数可能不存在，所以要有验证。代码如下：
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();
        if(nums == null || nums.length == 0) return res;
        int c1 = 0, c2 = 0, count1 = 0, count2 = 0;
        for(int num: nums) {
            if(num == c1) {
                count1++;
            } else if(num == c2) {
                count2++;
            } else if(count1 == 0) {
                c1 = num;
                count1++;
            } else if(count2 == 0) {
                c2 = num;
                count2++;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for(int num: nums) {
            if(num == c1) count1++;
            else if(num == c2) count2++;
        }
        if(count1 > nums.length/3) res.add(c1);//验证的步骤
        if(count2 > nums.length/3) res.add(c2);
        return res;
    }
}
