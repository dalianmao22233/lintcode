
第二次：或者用Character.isLetterOrDigit，具体见：http://www.cnblogs.com/yrbbest/p/4438480.html
public class Solution {
    public boolean isPalindrome(String s) {
        if(s == null || s.length() == 0 ) {
            return true;
        }
        s = s.toLowerCase();
        int l = 0, r = s.length()-1;
        while(l <= r){
            if(!Character.isLetter(s.charAt(l)) && !Character.isDigit(s.charAt(l))) {l++;continue;}
            if(!Character.isLetter(s.charAt(r)) && !Character.isDigit(s.charAt(r))) {r--;continue;}
            if(s.charAt(l) == s.charAt(r)) {
                l++; 
                r--;
            } else {
                return false;
            }
        }
        return true;
    }
}

第一次：

public class Solution {
    public boolean isPalindrome(String s) {
        if(s == null || s.length() == 0){
            return true;
        }
        int start = 0;
        int end = s.length() - 1 ;
        while(start < end){
            while(start < s.length() && !is_valid(s.charAt(start))){
                start++;//invalid, ++
            }
            if(start == s.length()){ //for empty string ",./;'"
                return true;
            }
            while(end >= 0 && !is_valid(s.charAt(end))){
                end--;//invalid, --
            }
            if(Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end))){
                break;
            }
            else{
                start++;
                end--;
            }
        
        }
        return end <= start;//这里一定是<，比如"a,",此时start,end会交叉，不会出现start<end的情况。但仍然是回文。
    }
    private boolean is_valid(char c){
            return Character.isLetter(c) || Character.isDigit(c);//only consider number and word
    }
}
