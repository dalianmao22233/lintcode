第二次：DP做法，画图就懂了。
省空间的DP方法，维护一个常量max，表示最远能到达的位置，遍历数组中每一个数字，
如果当前坐标大于max或者max已经抵达最后一个位置则跳出循环。
否则就更新max的值为其和i + nums[i]中的较大值，其中i + nums[i]表示当前位置能到达的最大位置
public class Solution {
    public boolean canJump(int[] nums) {
        if(nums == null && nums.length == 0)
            return false;
        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            if(i > max || max >= nums.length-1) break; //必须是max>=nums.length-1,[2,0]这里就是max=2,可以到达最后一位(len-1)的位置
            max = Math.max(max, i+nums[i]);
        }
        return max >= nums.length-1;
    }
}
第一次:这次的做法不知道怎么都变成TLE了。
/*Example
A = [2,3,1,1,4], return true.
A = [3,2,1,0,4], return false.
This can be done using DP. However, greedy algorithm is fast in this particular problem. Consider both solutions.
DP
Thinking Process:
We have array A, that stores the # of steps for each index.
Function: state = canjump[j] && (j + A[j] >= i) 数组下标的考虑：A[j] >= i - j
Answer: f[n-1], if n is the length of A
*/
public class Solution {
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    public boolean canJump(int[] A) {
        // wirte your code here
        if(A == null || A.length == 0){
            return false;
        }
        boolean []canjump = new boolean[A.length];
        canjump[0] = true;//这里必须是true,不然没法往下跳
        for(int i = 1; i < A.length; i++){
            for(int j = 0; j < i; j++){
                if((i -j <= A[j])&&canjump[j]){
                    canjump[i] = true;
                    break;
                }
            }
        }
        return canjump[A.length - 1];
        
    }
}
// version 2: Greedy
public class Solution {
    public boolean canJump(int[] A) {
        // think it as merging n intervals
        if (A == null || A.length == 0) {
            return false;
        }
        int farthest = A[0];
        for (int i = 1; i < A.length; i++) {
            if (i <= farthest && A[i] >= farthest - i) {
                farthest = A[i] + i;//farthest - i = A[i]
            }
        }
        return farthest >= A.length - 1;
    }
}
