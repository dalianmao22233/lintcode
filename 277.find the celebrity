http://www.geeksforgeeks.org/the-celebrity-problem/ 这个写的全
1. time: O(n), space: O(1), 最佳
public class Solution extends Relation {
    public int findCelebrity(int n) {
        int candidate = 0;
        for(int i = 1; i < n; i++) {
            if(knows(candidate, i)) {
                candidate = i;
            }
        }
        for(int i = 0; i < n; i++) {
            if(i != candidate && (knows(candidate, i) || !knows(i, candidate))) return -1;
        }
        return candidate;
    }
}
2. 算indegree, outdegree数量， Time: O(n^2), Space O(n).
The problem can be transformed as a graph problem. We count the in-degree and out-degree for each person. 
Then find out the person with in-degree n - 1 and out-degree 0. 
public class Solution extends Relation {
    public int findCelebrity(int n) {
        if (n <= 1) {
            return -1;
        }
         
        int[] inDegree = new int[n];
        int[] outDegree = new int[n];
         
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && knows(i, j)) {
                    outDegree[i]++;
                    inDegree[j]++;
                }
            }
        }
         
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == n - 1 && outDegree[i] == 0) {
                return i;
            }
        }
         
        return -1;
    }
}

3. 面试时解法不正确，找到celebrity后没check明星认不认识其他人
Time：O(n), Space: O(1)
Use two pointers, left starts from 0, and right starts from n - 1.
Check if knows(left, right). If yes, left++. Else, right--.
After the first step, we could find out the potential candidate. 
In the second step, we validate the candidate by iterating through all the person again. 
Each one must know the candidate while the candidate must not know anyone else. 



The idea is to use two pointers, one from start and one from the end. Assume the start person is A, 
and the end person is B. If A knows B, then A must not be the celebrity. Else, B must not be the celebrity. 
We will find a celebrity candidate at the end of the loop. Go through each person again and check whether
this is the celebrity.

public class Solution extends Relation {
    public int findCelebrity(int n) {
        if (n <= 1) {
            return -1;
        }
         
        int left = 0;
        int right = n - 1;
         
        // Step 1: Find the potential candidate
        while (left < right) {
            if (knows(left, right)) {
                left++;
            } else {
                right--;
            }
        }
         
        // Step 2: Validate the candidate
        int candidate = right;
        for (int i = 0; i < n; i++) {
            if (i != candidate && (!knows(i, candidate) || knows(candidate, i))) {
                return -1;
            }
        }
         
        return candidate;
    }
}

