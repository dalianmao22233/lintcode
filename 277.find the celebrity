http://www.geeksforgeeks.org/the-celebrity-problem/ 这个写的全
1. time: O(n), space: O(1), 最佳
public class Solution extends Relation {
    public int findCelebrity(int n) {
        int candidate = 0;
        for(int i = 1; i < n; i++) {
            if(knows(candidate, i)) {
                candidate = i;
            }
        }
        for(int i = 0; i < n; i++) {
            if(i != candidate && (knows(candidate, i) || !knows(i, candidate))) return -1;
        }
        return candidate;
    }
}
2. 算indegree, outdegree数量， Time: O(n^2), Space O(n).
The problem can be transformed as a graph problem. We count the in-degree and out-degree for each person. 
Then find out the person with in-degree n - 1 and out-degree 0. 
public class Solution extends Relation {
    public int findCelebrity(int n) {
        if (n <= 1) {
            return -1;
        }
         
        int[] inDegree = new int[n];
        int[] outDegree = new int[n];
         
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && knows(i, j)) {
                    outDegree[i]++;
                    inDegree[j]++;
                }
            }
        }
         
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == n - 1 && outDegree[i] == 0) {
                return i;
            }
        }
         
        return -1;
    }
}

3. 面试时解法不正确，找到celebrity后没check明星认不认识其他人
Time：O(n), Space: O(1)
Use two pointers, left starts from 0, and right starts from n - 1.
Check if knows(left, right). If yes, left++. Else, right--.
After the first step, we could find out the potential candidate. 
In the second step, we validate the candidate by iterating through all the person again. 
Each one must know the candidate while the candidate must not know anyone else. 



The idea is to use two pointers, one from start and one from the end. Assume the start person is A, 
and the end person is B. If A knows B, then A must not be the celebrity. Else, B must not be the celebrity. 
We will find a celebrity candidate at the end of the loop. Go through each person again and check whether
this is the celebrity.

public class Solution extends Relation {
    public int findCelebrity(int n) {
        if (n <= 1) {
            return -1;
        }
         
        int left = 0;
        int right = n - 1;
         
        // Step 1: Find the potential candidate
        while (left < right) {
            if (knows(left, right)) {
                left++;
            } else {
                right--;
            }
        }
         
        // Step 2: Validate the candidate
        int candidate = right;
        for (int i = 0; i < n; i++) {
            if (i != candidate && (!knows(i, candidate) || knows(candidate, i))) {
                return -1;
            }
        }
         
        return candidate;
    }
}

4. 用stack， Complexity O(N). Total comparisons 3(N-1)， Out goal is to minimize calls to HaveAcquanintance function.



The graph construction takes O(N2) time, it is similar to brute force search. In case of recursion, we reduce the problem instance by not more than one, and also combine step may examine M-1 persons (M – instance size).
We have following observation based on elimination technique (Refer Polya’s How to Solve It book).

If A knows B, then A can’t be celebrity. Discard A, and B may be celebrity.
If A doesn’t know B, then B can’t be celebrity. Discard B, and A may be celebrity.
Repeat above two steps till we left with only one person.
Ensure the remained person is celebrity. (Why do we need this step?)
We can use stack to verity celebrity.

Push all the celebrities into a stack.
Pop off top two persons from the stack, discard one person based on return status of HaveAcquaintance(A, B).
Push the remained person onto stack.
Repeat step 2 and 3 until only one person remains in the stack.
Check the remained person in stack doesn’t have acquaintance with anyone else.
We will discard N elements utmost (Why?). If the celebrity is present in the party, we will call HaveAcquaintance() 3(N-1) times. Here is code using stack.
int findCelebrity(int n)
{
    // Handle trivial case of size = 2
 
    stack<int> s;
 
    int C; // Celebrity
 
    // Push everybody to stack
    for (int i=0; i<n; i++)
        s.push(i);
 
    // Extract top 2
    int A = s.top();
    s.pop();
    int B = s.top();
    s.pop();
 
    // Find a potential celevrity
    while (s.size() > 1)
    {
        if (knows(A, B))
        {
            A = s.top();
            s.pop();
        }
        else
        {
            B = s.top();
            s.pop();
        }
    }
 
    // Potential candidate?
    C = s.top();
    s.pop();
 
    // Last candidate was not examined, it leads
    // one excess comparison (optimize)
    if (knows(C, B))
        C = B;
 
    if (knows(C, A))
        C = A;
 
    // Check if C is actually a celebrity or not
    for (int i = 0; i < n; i++)
    {
        // If any person doesn't know 'a' or 'a'
        // doesn't know any person, return -1
        if ( (i != C) &&
                (knows(C, i) || !knows(i, C)) )
            return -1;
    }
 
    return C;
}
5.recursive 方法， O(n^2) 
