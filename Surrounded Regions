我的理解：就是如果边缘有一个O,那么要看这个O的上下左右有没有O,如果有的话，将这个接触的O变为#，就是污染的本质。
其他人：
这道题是说一个O周围都是X那么这个O就得变成X。那么就可以发现四周这一圈如果有O肯定不能四周都被X包围，同时这个O也将会是潜在的内部的O的缺口，
让内部的O不能都被X覆盖。因此，思路就是先对四周的O进行特殊处理，用BFS走，把所有这个O连接的O（包括这个O）都涂成#。这样子，对于原来的棋盘来说，
没有变成#的O就是四周没有被O污染的，四周都是X，那么对其变成X。而所有#就是那些原来是O但是不是四周都被X包围的，把它们再还原成O。
这个题目用到的方法是图形学中的一个常用方法：Flood fill算法，其实就是从一个点出发对周围区域进行目标颜色的填充。背后的思想就是把一个矩阵看成一个图
的结构，每个点看成结点，而边则是他上下左右的相邻点，然后进行一次广度或者深度优先搜索。
接下来我们看看这个题如何用Flood fill算法来解决。首先根据题目要求，边缘上的'O'是不需要填充的，所以我们的办法是对上下左右边缘做Flood fill算法，
把所有边缘上的'O'都替换成另一个字符，比如'#'。接下来我们知道除去被我们换成'#'的那些顶点，剩下的所有'O'都应该被替换成'X'，而'#'那些最终应该是
还原成'O'，如此我们可以做最后一次遍历，然后做相应的字符替换就可以了。复杂度分析上，我们先对边缘做Flood fill算法，因为只有是'O'才会进行，
而且会被替换成'#'，所以每个结点改变次数不会超过一次，因而是O(m*n)的复杂度，最后一次遍历同样是O(m*n)，所以总的时间复杂度是O(m*n)。
空间上就是递归栈（深度优先搜索）或者是队列（广度优先搜索）的空间，同时存在的空间占用不会超过O(m+n)（以广度优先搜索为例，每次队列中的结点虽然
会往四个方向拓展，但是事实上这些结点会有很多重复，假设从中点出发，可以想象最大的扩展不会超过一个菱形，也就是n/2*2+m/2*2=m+n，
所以算法的空间复杂度是O(m+n)）。
public void solve(char[][] board) {
    if(board==null || board.length<=1 || board[0].length<=1)
        return;
    
    //第一行和最后一行进行fill
    for(int i=0;i<board[0].length;i++){
        fill(board,0,i);
        fill(board,board.length-1,i);
    }
    
    //第一列和最后一列进行fill
    for(int i=0;i<board.length;i++){
        fill(board,i,0);
        fill(board,i,board[0].length-1);
    }
    
    //对于当前格子中，所有O变成X（说明符合要求，没有被变成#),所有#变成O
    for(int i=0;i<board.length;i++){
        for(int j=0;j<board[0].length;j++){
            if(board[i][j]=='O')
                board[i][j]='X';
            else if(board[i][j]=='#')
                board[i][j]='O';                
        }
    }
}

private void fill(char[][] board, int i, int j){
    if(board[i][j]!='O')
        return;
    board[i][j] = '#';
    //利用BFS
    LinkedList<Integer> queue = new LinkedList<Integer>();
    //先将矩阵的横纵坐标编码
    int code = i*board[0].length+j;
    queue.add(code);
    while(!queue.isEmpty()){
        code = queue.poll();
        int row = code/board[0].length;//从code中还原横坐标
        int col = code%board[0].length;//从code中还原纵坐标
        
        if(row>=1 && board[row-1][col]=='O'){//当前元素上边是否为0
            queue.add((row-1)*board[0].length + col);
            board[row-1][col]='#';
        }
        
        if(row<=board.length-2 && board[row+1][col]=='O'){//当前元素下面是否为0
            queue.add((row+1)*board[0].length + col);
            board[row+1][col]='#';
        }
        
        if(col>=1 && board[row][col-1]=='O'){//当前元素左边是否为0
            queue.add(row*board[0].length + col-1);
            board[row][col-1]='#';
        }
        
        if(col<=board[0].length-2 && board[row][col+1]=='O'){//当前元素右边是否为0
            queue.add(row*board[0].length + col+1);
            board[row][col+1]='#';
        }            
    }
}
