/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: A list of lists of integer include 
     *          the zigzag level order traversal of its nodes' values 
     */
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        // write your code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null){
            return result;
        }
        Stack<TreeNode> currlevel = new Stack<TreeNode>();
        Stack<TreeNode> nextlevel = new Stack<TreeNode>();
        Stack<TreeNode> tmp;
        currlevel.push(root);
        boolean normalOrder = true;
        
        while(!currlevel.isEmpty()){
            ArrayList<Integer> currlevelResult = new ArrayList<Integer>();
            while(!currlevel.isEmpty()){
                TreeNode node = currlevel.pop();
                currlevelResult.add(node.val);
                if(normalOrder){
                    if(node.left != null){
                        nextlevel.push(node.left);
                    }
                    if(node.right != null){
                        nextlevel.push(node.right);
                    }
                }
                else{
                    if(node.right != null){
                        nextlevel.push(node.right);
                    }
                    if(node.left != null){
                        nextlevel.push(node.left);
                    }
                }
            }
            result.add(currlevelResult);
            tmp = currlevel;
            currlevel = nextlevel;
            nextlevel = tmp;
            normalOrder = !normalOrder;
        }
        return result;
    }
}
