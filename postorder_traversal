另一种解法是使用两个栈。试着在纸上画一下图。但实际上它做的是反向的先序遍历。亦即遍历的顺序是：节点 -> 右子树 -> 左子树。
这生成的是后根遍历的逆序输出。使用第二个栈，再执行一次反向输出即可得到所要的结果。=
下面是它的实现步骤：
将根节点压入第一个栈
从第一个栈中弹出一个元素，压入第二个栈
然后分别将该节点的左右孩子压入第一个栈
重复步骤2和步骤3直到第一个栈为空
执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。
双栈法的空间复杂度是O(n)，其中n是节点的总个数
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if(root == null) return res;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        Stack<Integer> tmp = new Stack<Integer>();
        stack.push(root);
        while(!stack.isEmpty()) {
            TreeNode node = stack.pop();
            tmp.push(node.val);
            if(node.left != null) stack.push(node.left);
            if(node.right != null) stack.push(node.right);
        }
        while(!tmp.isEmpty()) {
            int tmp_node_val = tmp.pop();
            res.add(tmp_node_val);
        }
        return res;
        
    }
}
根据以上的想法，可以不用双栈，用stack+list也行，意思是一样的：
 public List<Integer> postorderTraversal(TreeNode r) {
        LinkedList<Integer> list = new LinkedList<>();
        if (r == null)
            return list;

        Stack<TreeNode> stack = new Stack<>();
        stack.push(r);

        while (!stack.isEmpty()) {
            final TreeNode treeNode = stack.pop();
            list.addFirst(treeNode.val);
            if (treeNode.left != null)
                stack.push(treeNode.left);
            if (treeNode.right != null)
                stack.push(treeNode.right);
        }
        return list;
    }




第一种解法，记录下来prev，即访问当前节点之前访问的那个节点的情况，一共三种

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Postorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        if(root == null){
            return result;
        }
        TreeNode prev = null;
        TreeNode cur = root;
        stack.push(root);
        while(!stack.empty()){//这里我原来加了判断条件cur != null，出错，在这个while的最后一步中
        有prev = cur的保存，在第一个if中也有关于prev是否为空的判断，所以不用再加cur != null的判断，
        如果加了，那么第一个if可能进不来。
            cur = stack.peek();
            if(prev == null || prev.left == cur || prev.right == cur){//prev==null必须放第一个，
            //因为如果prev.left == cur在前面，会报错，prev = null时根本没有left.
                if(cur.left != null){
                    stack.push(cur.left);
                }
                //如果没有左孩子，再看右孩子
                else if(cur.right != null){
                    stack.push(cur.right);
                }
                else{
                    stack.pop();
                    result.add(cur.val);
                }
            }
            else if(prev == cur.left){
                if(cur.right != null){
                    stack.push(cur.right);
                }
                else{
                    stack.pop();
                    result.add(cur.val);
                }
                
            }
            else {//此处不用写出来cur.right == prev
                stack.pop();
                result.add(cur.val);
            }
            prev = cur;
        }
        return result;
    }
}
