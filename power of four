第一种：位移法
1   0 0000 0001
4   0 0000 0100
16  0 0001 0000
64  0 0100 0000
256 1 0000 0000
仔细观察可以发现，4的幂的二进制形式中，都是在从后向前的奇数位有一个1，所以只要一个数符合这个模式，就是4的幂。
我们知道4的幂的1只可能在奇数位，而2的幂的1可能在任意位，所以我们只要判断是不是奇数位是1就行了。
因为根据n & (n - 1)我们已经筛出来那些只有1个1的数了，所以和01010101...
也就是0x55555555相与就能知道1是在奇数位还是偶数位了。

public class Solution {
    public boolean isPowerOfFour(int num) {
    //if(num == 0 || num == Integer.MIN_VALUE) return false;  
        if(num <=0) return false;
        return (((num-1) & num) == 0) && ((num&0x55555555) == num);
    }
}

第二种：普通暴力做法
private boolean bruteForceBit(long num){
    boolean res = false;
    if(num <= 0) return res;
    for(int i = 1; i <= 64; i++){
        // 如果该位是0，则不操作
        if((num & 1) == 1){
            // 如果是偶数位为1，说明不是4的幂
            if(i % 2 == 0) return false;
            // 如果是奇数位为1，如果之前已经有1了，则也不是4的幂
            if(res){
                return false;
            } else {
            // 如果是第一次出现技术位为1，则可能是4的幂
                res = true;
            }
        }
        num = num >>> 1;
    }
    return res;
}
