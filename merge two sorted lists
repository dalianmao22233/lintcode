第三次：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null) return l1;
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        
        while(l1 != null && l2 != null) {
            if(l1.val > l2.val) {
                head.next = l2;
                l2 = l2.next;
            } else {
                head.next = l1;
                l1 = l1.next;
            }
            head = head.next;
        }
        while(l1 != null) { //跟第二次的区别就是这里是while，一直链到最后一个点。但是没必要。
            head.next = l1;
            l1 = l1.next;
            head = head.next;
        }
        while(l2 != null) {
            head.next = l2;
            l2 = l2.next;
            head = head.next;
        }
        return dummy.next;
    }
}
第二次：
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        dummy.next = head;
        while(l1 != null && l2 != null ) {
            if(l1.val < l2.val) {
                head.next = l1;
                l1 = l1.next;
            } else {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        if(l1 != null) { 
            head.next = l1;
        } else {
            head.next = l2;
        }
        return dummy.next;
    }
}
第一次：
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param ListNode l1 is the head of the linked list
     * @param ListNode l2 is the head of the linked list
     * @return: ListNode head of linked list
     */
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // write your code here
        if(l1 == null && l2 == null){
            return null;
        }
        if(l1 == null && l2 != null){
            return l2;
        }
        if(l2 == null && l1 != null){
            return l1;
        }
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        while(l1 != null && l2 != null){   //这里我写成||了，报错，根据while外面的情况，必须是&&。
            if(l1.val < l2.val){
                head.next = l1;//必须有head.next的赋值。我没写，报错了。最后只返回了head.因为.next结构构造了链表，所以必须有！
                l1 = l1.next;
            }
            else{
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        if(l1 != null){//l1 l2长度不同。把剩下的连接上。
            head.next = l1;
        }
        else{
            head.next = l2;
        }
        return dummy.next;
        
        
       
    }
}
