注意NestedInteger的特性，看要求。
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
 第一种： 好懂，但是慢
public class Solution {
    public NestedInteger deserialize(String s) {
        Stack<NestedInteger> stack = new Stack<>();
        String tmp = "";
        for(char c: s.toCharArray()) {
            switch(c) {
                case '[':
                    stack.push(new NestedInteger());
                    break;
                case ']':
                    if(!tmp.equals("")) {
                        stack.peek().add(new NestedInteger(Integer.parseInt(tmp)));
                        tmp = "";
                    }
                    NestedInteger top = stack.pop();
                    if(!stack.empty()) {
                        stack.peek().add(top);
                    } else {
                        return top;
                    }
                    break;
                case ',':
                    if(!tmp.equals("")) {
                        stack.peek().add(new NestedInteger(Integer.parseInt(tmp)));
                        tmp = "";
                    }
                    break;
                default:
                tmp += c;
            }
        }
        if(!tmp.equals("")) {
            return new NestedInteger(Integer.parseInt(tmp));
        }
        return null;
    }
}
第二种：真特么快， recursive做法
public class Solution {
       public NestedInteger deserialize(String s) {
        NestedInteger ret = new NestedInteger();
        if (s == null || s.length() == 0) return ret;
        if (s.charAt(0) != '[') {
            ret.setInteger(Integer.parseInt(s));
        }
        else if (s.length() > 2) {
            int start = 1, count = 0;
            for (int i = 1; i < s.length(); i++) {
                char c = s.charAt(i);
                if (count == 0 && (c == ',' || i == s.length() - 1)) {
                    ret.add(deserialize(s.substring(start, i)));
                    start = i + 1;
                }
                else if (c == '[') count++;
                else if (c == ']') count--;
            }
        }
        return ret;
    }
}
