第二次：从右上角往下搜就是找更大的，往左搜就是找更小的，或者可以从左下角开始。
时间复杂度：o(m+n) 空间复杂度：o(1)
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) return false;
        int rowNum = matrix.length, colNum = matrix[0].length;
        int i = 0, j = colNum - 1;
        while (i < rowNum && j >= 0) {
            if (matrix[i][j] == target) return true;
            else if (matrix[i][j] < target) i++;
            else j--;
        }
        return false;
    }
}
第一次：
o(m+n)
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return false;
        int row = matrix.length;
        int column = matrix[0].length;
    
        if(target < matrix[0][0] || target > matrix[row - 1][column - 1])
            return false;
    
        for(int i = 0; i < row; i++){
            for(int j = column - 1; j >= 0; j--){
                if(target == matrix[i][j])
                    return true;
                //else if(target < matrix[i][j]);
                    //do nothing, decrease column number
                else if(target > matrix[i][j])
                    break;
            }
        }
    
        return false;
    }
}
