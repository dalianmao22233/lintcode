merge sort version:

public class Solution {            
    private ListNode findMiddle(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;//fast slow don't need point to the same place. 
       
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;//fast = head.next, 画画图就懂了，最后返回的就是slow.
    }
    private ListNode mergeList(ListNode node1, ListNode node2){
      
        if(node1 == null && node2 == null){
            return null;
        }
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
       
        while(node1 != null && node2 != null){
            if(node1.val < node2.val){
                head.next = node1;
                node1 = node1.next;
            }
            else{
                head.next = node2;
                node2 = node2.next;
            }
            head = head.next;
        }
        if(node1 != null){
            head.next = node1;
        }
        else{
            head.next = node2;
        }
        return dummy.next;
    }
    
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode mid = findMiddle(head);

        ListNode right = sortList(mid.next);
        mid.next = null;//attention!  如果不写，那么长度是不变的，一直是head，这样的话就是一直死循环，stackoverflow.
        ListNode left = sortList(head);

        return mergeList(left, right);
    }
}
