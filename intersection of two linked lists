第二次：
通俗易懂：
1. 得到2个链条的长度。
2. 将长的链条向前移动差值（len1 - len2）
3. 两个指针一起前进，遇到相同的即是交点，如果没找到，返回null.
相当直观的解法。空间复杂度O(1)， 时间复杂度O(m+n)
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null;
        int alen = getlen(headA);
        int blen = getlen(headB);
        int diff = Math.abs(alen-blen);
        if(alen > blen) {
            int count = diff;
            while(count > 0) {
                headA = headA.next;
                count--;
            }
        } else {
            int count = diff;
            while(count > 0) {
                headB = headB.next;
                count--;
            }
        }
        while(headA != null) {
            if(headA == headB) return headA;
            headA = headA.next;
            headB = headB.next;
        }
        return null;
    }
    public int getlen(ListNode node) {
        if(node == null) return 0;
        int count = 0;
        while(node != null) {
            node = node.next;
            count++;
        }
        return count;
    }
}
第一次：

我的：
使用hashMap
public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        HashMap map = new HashMap();
        // while(headA != null){
        for(int i = 0; headA != null; i++){
            map.put(headA, i);
            headA = headA.next;
        }
        // for(int j = 0; headB != null; j++){
        while(headB != null){
            if(map.containsKey(headB)){
                return headB;
            }
            headB = headB.next;
        }
        return headB;//这里返回Null也是对的。
}

更简洁！：
To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, 
which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, 
because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, and pA to head B, we now ask pB to travel
exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same
time.
If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, 
record the last element of A/B respectively. If the two last elements are not the same one, 
then the two lists have no intersections.


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        ListNode a=headA;
        ListNode b=headB;
        while(a != b){
            a = a==null?headB:a.next;
            b = b==null?headA:b.next;
        }
        return b;//a也一样
    }
}
