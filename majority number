总结：4种方法
// Sorting
public int majorityElement1(int[] nums) {
    Arrays.sort(nums);
    return nums[nums.length/2];
}

// Hashtable 
public int majorityElement2(int[] nums) {
    Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
    //Hashtable<Integer, Integer> myMap = new Hashtable<Integer, Integer>();
    int ret=0;
    for (int num: nums) {
        if (!myMap.containsKey(num))
            myMap.put(num, 1);
        else
            myMap.put(num, myMap.get(num)+1);
        if (myMap.get(num)>nums.length/2) {
            ret = num;
            break;
        }
    }
    return ret;
}

// Moore voting algorithm
摩尔投票法 Moore Voting，需要O(n)的时间和O(1)的空间，比前一种方法更好。这种投票法先将第一个数字假设为众数，然后把计数器设为1，
比较下一个数和此数是否相等，若相等则计数器加一，反之减一。然后看此时计数器的值，若为零，则将当前值设为候选众数。以此类推直到遍历完整个数组，
当前候选众数即为该数组的众数。这道题限定了一定有众数，所以不用验证。不然要像|| 里一样，必须在最后验证。
public int majorityElement3(int[] nums) {
    int count=0, ret = 0;
    for (int num: nums) {
        if (count==0)
            ret = num;
        if (num!=ret)
            count--;
        else
            count++;
    }
    return ret;
}

// Bit manipulation 
public class Solution {
    public int majorityElement(int[] nums) {
        int winner = 0;
        for(int i = 0, mask = 1; i < 32; i++, mask <<= 1) {
            int ones = 0;
            for(int j = 0; j < nums.length; j++) {
                if((nums[j]&mask) != 0) ones++;
                if(ones > nums.length/2) {
                    winner = winner | mask;
                    break;
                }
            }
            
        }
        return winner;
    }
}
第二次：
用hashmap
public class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i: nums) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i)+1);
            } else {
                map.put(i, 1);
            }
            
        }
        for(int i : map.keySet()) {
            if(map.get(i) > nums.length/2) {
                return i;
            }
        }
        return 0;
    }
}
第一次：
/*Challenge
O(n) time and O(1) space
Tag: Enumeration
Thinking process:
Natural thinking process: count how many you have for 1st element, if next one is the same, count++, if next one is not the same, count- -. 
When count ==0, that means other types of element has same amount as the 1st majority number, they are even.
From this point, count the value at current position as the majority number, keep the loop rolling.
Note: this solutions works only when the given array has a valid solution.
CounterCase:[111223], with actually return 3 as the majority number. But again, this is not a valid input in this case.
*/
public class Solution {
    /**
     * @param nums: a list of integers
     * @return: find a  majority number
     */
    public int majorityNumber(ArrayList<Integer> nums) {
        // write your code
        if(nums == null || nums.size() == 0){
            return 0;
        }
        int candidate = -1;
        int count = 0;
        for(int i = 0; i < nums.size(); i++){
            if(count == 0){
                count = 1;
                candidate = nums.get(i);
            }
            else if(candidate == nums.get(i)){//注意这里是else if，一共只有三种情况。if就报错了。如果只写if，
            相当于除了第一个if又进了第二个if.计数会少1.
                count++;
            }
            else{
                count--;
            }
            
        }
        return candidate;
        
    }
}
