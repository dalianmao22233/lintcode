dp做法：
需要一个一维数组dp，其中dp[i]表示目标数为i的解的个数，然后我们从1遍历到target，对于每一个数i，
遍历nums数组，如果i>=x, dp[i] += dp[i - x]。这个也很好理解，比如说对于[1,2,3] 4，这个例子，
当我们在计算dp[3]的时候，3可以拆分为1+x，而x即为dp[2]，3也可以拆分为2+x，此时x为dp[1]，
3同样可以拆为3+x，此时x为dp[0]，我们把所有的情况加起来就是组成3的所有情况了
dp[4] = dp[3]+dp[2]+dp[1]+dp[0]酱紫算出来的
public class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(nums == null || nums.length == 0) return 0;
        int[] dp = new int[target+1];
        dp[0] = 1;
        Arrays.sort(nums);
        for(int i = 1; i <= target; i++) {
            for(Integer a: nums) {
                if(i < a) break;
                dp[i] += dp[i-a];
            }
            System.out.println(dp[i]);
        }
        
        return dp[dp.length-1];
        
    }
}
dfs+backtracking:这种 TLE，但是要会， 我写的
public class Solution {
    int count = 0; //注意这个要设为全局变量。不然DFS传回来的值不会得到正确的返回。
    public int combinationSum4(int[] nums, int target) {
        if(nums == null || nums.length == 0 || target <= 0) return 0;
        // int count = 0;
        dfs(nums, target);
        return count;
    }
    private void dfs(int[] nums, int target) {
        if(target == 0) {
            count++;
            return;
        }
        if(target < 0) return;
        for(int i = 0; i < nums.length; i++) {
            dfs(nums, target-nums[i]);
        }
        
    }
}
