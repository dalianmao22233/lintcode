这道题的解法非常接近于NP问题，也是采用递归的解法。基本思路就是取出一个合法的数字，作为IP地址的一项，然后递归处理剩下的项。可以想象出一颗树，
每个结点有三个可能的分支（因为范围是0-255，所以可以由一位两位或者三位组成）。并且这里树的层数不会超过四层，因为IP地址由四段组成，到了之后
我们就没必要再递归下去，可以结束了。这里除了上述的结束条件外，另一个就是字符串读完了。可以看出这棵树的规模是固定的，不会像平常的NP问题那样，
时间复杂度取决于输入的规模，是指数量级的，所以这道题并不是NP问题，因为他的分支是四段，有限制。
实现中需要一个判断数字是否为合法ip地址的一项的函数，首先要在0-255之间，其次前面字符不能是0。剩下的就是NP问题的套路了，递归中套一个for循环，
不熟悉的朋友可以看看N-Queens哈。
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        if(s.length() > 12 || s.length() < 4) return res;
        helper(s, "", res, 0, 1);
        return res;
    }
    private void helper(String s, String item, List<String> res, int index, int segment) {
        if(index>=s.length()) return;
        if(segment == 4) {
            String str = s.substring(index);
            if(isvalid(str)) {
                res.add(item+"."+str);
            }
            return;
        }
        for(int i = 1; i+index<s.length() && i < 4; i++) {
            String str = s.substring(index, index+i);
            if(isvalid(str)) {
                if(segment == 1) {
                    helper(s, str, res, index+i, segment+1);
                } else {
                    helper(s, item+"."+str, res, index+i, segment+1);
                }
            }
        }
    }
    private boolean isvalid(String str) {
        if(str == null || str.length()== 0)  return false;
        if(str.length() > 3) return false;
        if(str.charAt(0) == '0' && str.length()>1) return false;
        int intstr = Integer.parseInt(str);
        return intstr>=0 && intstr <= 255;
    }
}
