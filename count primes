public class Solution {
    public int countPrimes(int n) {
        boolean[] isPrime = new boolean[n];
        for(int i = 2; i < n; i++){
            isPrime[i] = true;
        }
        for(int i = 2; i*i < n; i++){
            if(isPrime[i] == false){
                continue;
            }
            for(int j = i*i; j < n; j += i){
                isPrime[j] = false;
            }
        }
        int count = 0;
        for(int i = 2; i < n; i++){
            if(isPrime[i] == true){
                count++;
            }
        }
        return count;
    }
}
----------------------------------------------------
leetcode hint解法:
publib int countPrimes(int n) {
    if (n < 3)
        return 0;

    boolean[] f = new boolean[n];
    //Arrays.fill(f, true); boolean[] are initialed as false by default
    int count = n / 2;
    for (int i = 3; i * i < n; i += 2) {
        if (f[i])
            continue;

        for (int j = i * i; j < n; j += 2 * i) {
            if (!f[j]) {
                --count;
                f[j] = true;
            }
        }
    }
    return count;
}
-----------------------------另一种：
public class Solution {
    public int countPrimes(int n) {
       
        boolean notPrime[] = new boolean[n + 2];
        notPrime[0] = notPrime[1] = true;
        for (int i = 2; i * i < n; i++) {
          if (!notPrime[i]) {
            int c = i * i;
            while (c < n) {
              notPrime[c] = true;
              c += i;
            }
          }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
          if (!notPrime[i])
            ans ++;
        }
        return ans;
      
    }
}
