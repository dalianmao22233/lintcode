这题的难点在于几个corner case：
1.0和1是一个版本，意味即使长度不一样，也要检查后面是否都是0
1.15要大于1.5，因为前者是第15个子版本，而后者是第5个
最简单的方法就是用split方法按照.分割，然后比对相应的每一个子串。
public class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        int i = 0;
        // 比对相应的子串
        for(; i < v1.length && i < v2.length; i++){
            int val1 = Integer.parseInt(v1[i]);
            int val2 = Integer.parseInt(v2[i]);
            if(val1 < val2) return -1;
            if(val1 > val2) return 1;
        }
        // 如果某个版本号更长，判断其多余部分是否是0，如果不是0，则较长的较大，否则是一样的。
        if(v2.length > v1.length){
            for(; i < v2.length; i++){
                int val = Integer.parseInt(v2[i]);
                if(val != 0) return -1;
            }
        } else if(v1.length > v2.length){
            for(; i < v1.length; i++){
                int val = Integer.parseInt(v1[i]);
                if(val != 0) return 1;
            }
        }
        return 0;
        
    }
}
----------------------------------------------------------------
我的，有情况没考虑到，比较麻烦。但是思路应该没错。
public class Solution {
    public int compareVersion(String version1, String version2) {
        if(version1 == null || version2 == null){
            return 0;
        }
        String ver1_str1 = "";
        String ver1_str2 = "";
        String ver2_str1 = "";
        String ver2_str2 = "";
        for(int i = 0; i < version1.length(); i++){
            if(version1.charAt(i) == '.'){
                if(i != 0){
                    ver1_str1 = version1.substring(0, i);
                    ver1_str2 = version1.substring(i+1, version1.length());
                    break;
                }
                else{
                    return 0;
                }
            }
        }
        for(int j = 0; j < version2.length(); j++){
            if(version2.charAt(j) == '.'){
                if(j != 0){
                    ver2_str1 = version2.substring(0, j);
                    ver2_str2 = version2.substring(j+1, version2.length());
                    break;
                }
                else{
                    return 0;
                }
                
            }
        }
        if(Integer.parseInt(ver1_str1) < Integer.parseInt(ver2_str1) && Integer.parseInt(ver1_str2) < Integer.parseInt(ver2_str2)){
            return -1;
        }
        else if(Integer.parseInt(ver1_str1) > Integer.parseInt(ver2_str1) && Integer.parseInt(ver1_str2) > Integer.parseInt(ver2_str2)){
            return 1;
        }
        else{
            return 0;
        }
    }
}
