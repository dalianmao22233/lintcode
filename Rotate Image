我们把焦点放在一个元素的旋转上，可以看出要在员数组中旋转，在不丢失数据的情况下，每个值的要旋转会“波及”4个数，
以1为例波及到了1,3,7,9，每个数旋转要不丢失数据就要考虑如何让这个4个数都得以保留
 
前边总结了规律a[i][j] = a[n-1-j][i]，分析每组被波及的数，我们可以得出这里波及的4了数其实就是
 
a[i][j]
 
a[n-1-j][i]
 
a[n-1-i][n-1-j]
 
a[n-1-(n-1-j)][n-1-i]=a[j][n-1-i]
*****************************
public class Solution {
    public void rotate(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return;
        }

        int length = matrix.length;

        for (int i = 0; i < length / 2; i++) {
            for (int j = 0; j < (length + 1) / 2; j++){
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[length - j - 1][i];
                matrix[length -j - 1][i] = matrix[length - i - 1][length - j - 1];
                matrix[length - i - 1][length - j - 1] = matrix[j][length - i - 1];
                matrix[j][length - i - 1] = tmp;
            }
        }   
    }
}
--------------------------------------
public class Solution {
    public void rotate(int[][] matrix) {
    int n = matrix.length;
    for (int i = 0; i < n / 2; i++) {
        for (int j = 0; j < (n + 1) / 2; j++) {
            int temp = matrix[i][j];

            int i1 = n - 1 - j;
            int j1 = i;
            matrix[i][j] = matrix[i1][j1];

            int i2 = n - 1 - j1;
            int j2 = i1;
            matrix[i1][j1] = matrix[i2][j2];

            int i3 = n - 1 - j2;
            int j3 = i2;
            matrix[i2][j2] = matrix[i3][j3];

            matrix[i3][j3] = temp;
        }
    }
}

}
