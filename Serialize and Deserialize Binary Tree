/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder res = new StringBuilder();
        if(root == null){
            return "";
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        TreeNode node = root;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                node = queue.poll();
                if(node != null){
                    res = res.append(node.val+ " ");
                    queue.add(node.left);
                    queue.add(node.right);
                }else{
                    res = res.append("# ");
                }
            }
            
            
        }
        return res.substring(0, res.length()-1);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.length() == 0) return null;
        String[] strs = data.split(" ");
        int i = 0, n = strs.length;
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(strs[i++]));
        queue.add(root);
        while (!queue.isEmpty() && i < n) {
            int size = queue.size();
            for (int j = 0; j < size; j++) {
                TreeNode p = queue.poll();
                if (i >= n) 
                    break;
                if (strs[i].equals("#")) {
                    p.left = null;
                } else {
                    p.left = new TreeNode(Integer.parseInt(strs[i]));
                    queue.add(p.left);
                }
                if (++i >= n)
                    break;
                if (strs[i].equals("#")) {
                    p.right = null;
                } else {
                    p.right = new TreeNode(Integer.parseInt(strs[i]));
                    queue.add(p.right);
                }
                i++;
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
