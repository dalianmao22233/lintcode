第二次：
1.我写的brute force
public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        if(nums1 == null ||nums1.length == 0|| nums2 == null|| nums2.length == 0) return new int[0];
        int n1 = nums1.length;
        int n2 = nums2.length;
        Set<Integer> set = new HashSet<Integer>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        ArrayList<Integer> array = new ArrayList<Integer>();
        for(int i = 0; i < n1; i++) {
            for(int j = 0; j < n2; j++) {
                if(nums1[i] == nums2[j] && !set.contains(nums1[i])) {
                    set.add(nums1[i]);
                    break;
                }
                
            }
        }
        int len = set.size();
        int[] result = new int[len];
        int index= 0;
        for(Integer num : set) {
            result[index++] = num;
        }
        return result;
    }}
2. use two hashset：O(n)
public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Set<Integer> intersect = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set.contains(nums2[i])) {
                intersect.add(nums2[i]);
            }
        }
        int[] result = new int[intersect.size()];
        int i = 0;
        for (Integer num : intersect) {
            result[i++] = num;
        }
        return result;
    }
}
3.sort both arrays, use two pointers  ：O(nlogn)
public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[set.size()];
        int k = 0;
        for (Integer num : set) {
            result[k++] = num;
        }
        return result;
    }
}
4. binary search:见第一次的结果。O(nlogn)

第一次：
python就用内置的set，几行就完了
java中用sort+binary search：注意！！二分搜索的前提是，这是个有序的数组。先排序！

public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        if(nums1 == null || nums2 == null){
            return null;
        }
        Arrays.sort(nums1);//忘了写了。
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i < nums2.length; i++){
            if(set.contains(nums2[i])){
                continue;
            }
            if(bsearch(nums1, nums2[i])){
                set.add(nums2[i]);
            }
            
        }
        int[] res = new int[set.size()];
        int i = 0;
        for(Integer num : set){
            res[i] = num;
            i++;
        }
        return res;
    }
    private boolean bsearch(int[] nums, int target){ // binary search的固定做法
        if(nums == null || nums.length == 0) return false; //如果没有nums.length == 0,会越界。一定要写！
        int start = 0, end = nums.length-1;
        
        while(start+1 < end){
            int mid = (start + end)/2;
            // for(int i = 0; i < nums[i]; i++){
                if(nums[mid] > target){
                    end = mid;
                }
                else if(nums[mid] < target){
                    start = mid;
                }
                else{
                    return true;
                }
            // }
        }
        if(nums[start] == target){
            return true;
        }
        if(nums[end] == target){
            return true;
        }
        return false;
    }
}
