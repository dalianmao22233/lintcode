用BFS来解，我们先把给定字符串排入队中，然后取出检测其是否合法，若合法直接返回，不合法的话，我们对其进行遍历，对于遇到的左右括号的字符，
我们去掉括号字符生成一个新的字符串，如果这个字符串之前没有遇到过，将其排入队中，我们用哈希表记录一个字符串是否出现过。
我们对队列中的每个元素都进行相同的操作，直到队列为空还没找到合法的字符串的话，那就返回空集
public class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> res = new ArrayList<String>();
        if(s == null || s.length() == 0) {
            res.add(""); //we can delete s.length()==0, then just return res; otherwise must add empty string. like case3 ")("=>[""]
            return res;
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        HashSet<String> visited = new HashSet<>();
        boolean foundRes = false;
        while(!queue.isEmpty()) {
            s = queue.poll();
            if(isvalid(s)) {
                res.add(s);
                foundRes = true;
                // continue;
            }
            
            if(foundRes) continue;
            for(int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if(c == '(' || c == ')') {
                    String t = s.substring(0, i) + s.substring(i+1);
                    
                    
                    if(!visited.contains(t)) {
                        queue.offer(t);
                        visited.add(t);
                    }
                }
            }
        }
        return res;
    }
    private boolean isvalid(String s) { // !!remember !I met this tiny function in Sabre interview. I cannot solve it because the last line is wrong.
        int leftCount = 0;
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(') {
                leftCount++;
            } else if (c == ')') {
                leftCount--;
            }
            if(leftCount < 0) {
                return false;
            }
        }
        
        return leftCount == 0;
    }
}
