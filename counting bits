1. naive做法，循环遍历。
public class Solution {
    public int[] countBits(int num) {
        if (num < 0) {
            return null;
        }
        int[] arr = new int[num+1];
        if (num == 0) {
            return arr;
        }
        // int[] arr = new int[num];
        for (int i = 0; i <= num; i++) {
            int bits = countbits(i);
            arr[i] = bits;
        }
        return arr;
    }
    public int countbits(int num) {
        int count = 0; 
        while(num != 0){
            if(num%2==1){
                count++;
            }
            num = num/2;
        }
        return count;

    }
}
2. 参考http://www.cnblogs.com/grandyang/p/5294255.html
http://bookshadow.com/weblog/2016/03/18/leetcode-counting-bits/
i    bin       '1'    i&(i-1)
   0000    0
-----------------------
   0001    1    0000
-----------------------
   0010    1    0000
   0011    2    0010
-----------------------
   0100    1    0000
   0101    2    0100
   0110    2    0100
   0111    3    0110
-----------------------
   1000    1    0000
   1001    2    1000
  1010    2    1000
  1011    3    1010
  1100    2    1000
  1101    3    1100
  1110    3    1100
  1111    4    1110
我们可以发现每个i值都是i&(i-1)对应的值加1，这样我们就可以写出代码如下
public class Solution {
    public int[] countBits(int num) {
        if(num < 0) return new int[] {0};
        int[] res = new int[num+1];
        for(int i = 1; i <= num; i++) {
            res[i] = res[i & (i-1)] +1;
        }
        
        return res;
    }
}
