第二次：
第一种：这个比较好理解，递归
public class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left != null && root.right != null) 
            return 1+ Math.min(minDepth(root.left), minDepth(root.right));
        else if(root.left == null)
            return minDepth(root.right)+1;
        else if(root.right == null)
            return minDepth(root.left)+1;
        else 
            return 1;
    }
}
第二种：BFS, 类似于层序遍历，改动一些，因为是求最近的子节点距离。
public class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            level++;
            for(int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if(node.left == null && node.right == null) return level; //this is nearest leaf node!!!!return!
                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);
                
            }
            
        }
        return level;
    }
}
第三种：DFS
