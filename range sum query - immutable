给定整数数组nums，计算下标i与j之间的元素和（i ≤ j），包含边界。
第二次：
初始的数组长度设为nums.length+1比较方便，sumRange的时候可以不用写复杂的边界条件。不然就要判断i和0，1的比较。但是其实还要加上
i,j的边界判断。实际上就是多算了一位， sum[1]相当于1个数的和，sum[2]相当于2个数的和， sum[j+1]-sum[i]相当于j+1个数的和-i个数的和，
(2,5)==>(sum[6]-sum[2])，如果是sum[5]-sum[2]就是少算一个数。举举例子
public class NumArray {
    private int[] sum;
    public NumArray(int[] nums) {
        if(nums == null || nums.length == 0) return;
        sum = new int[nums.length+1];
        
        for(int i = 0; i < nums.length; i++) {
            
            sum[i+1] = sum[i]+nums[i];
        }
    }

    public int sumRange(int i, int j) {
        return sum[j+1]-sum[i];
    }
}
第一次：

public class NumArray {
    int[] sum;
    public NumArray(int[] nums) {
        sum = new int[nums.length];
        if (nums == null || nums.length == 0) {
            return;
        }
        sum[0] = 0;
        int sums = 0;
        for (int i = 0; i < nums.length; i++) {
            
            sums += nums[i];
            sum[i] = sums;
        }
    }

    public int sumRange(int i, int j) {
        if (j < 0 || j >= sum.length) {
            return Integer.MIN_VALUE;
        }
        return (i == 0)? sum[j]:sum[j]-sum[i-1];
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);
