是建立一个dp数组。在i从1到n的过程中，我们计算 dp[i - j * j] + 1最小的值。
也就是减去一个平方数后我们比较这个剩余值的最小值，再加上1，就是我们的dp[i]
Java:
Time Complexity - O(n * sqrt(n))， Space Complexity - O(n)

public class Solution {
    public int numSquares(int n) {
        if(n <= 0)  return 0;
        int sum = 0;
        int[] dp = new int[n+1];
        for(int i = 1; i <= n; i++) {
            int min = n;
            for(int j = 1; j*j <= i; j++) {
                min = Math.min(min, dp[i-j*j]+1);
            }
            dp[i] = min;
        }
        return dp[n];
    }
}
