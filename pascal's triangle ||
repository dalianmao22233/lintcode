第一种：
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> res = new ArrayList<>();
        
        for(int i = 0; i <= rowIndex; i++) {
            res.add(0, 1);
            
            for(int j = 1; j < res.size() - 1; j++)
                res.set(j, res.get(j) + res.get(j + 1));    
        }
        
        return res;
    }
}
第二种：memorization 和pascal's triangle一样。
Time Complexity - O(k ^2)，Space Complexity - O(k)。
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> res = new ArrayList<>();
        if (rowIndex < 0) return res;
        for (int i = 0; i <= rowIndex; i++) {
            res.add(1);
            for (int j = res.size() - 2; j > 0; j--) {
                res.set(j, res.get(j) + res.get(j - 1));
            }
        }
        return res;
    }
}
第三种：比较麻烦，仿照pascal's triangle的做法
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> first = new ArrayList<>();
        if(rowIndex < 0) return first;
        first.add(1);
        if(rowIndex == 0) return first;
        List<List<Integer>> total = new ArrayList<List<Integer>>();
        total.add(first);
        for(int i = 0; i < rowIndex; i++) {
            List<Integer> level = new ArrayList<>();
            level.add(1);
            for(int j = 1; j < total.get(i).size(); j++) {
                level.add(total.get(i).get(j)+total.get(i).get(j-1));
            }
            level.add(1);
            total.add(level);
        }
        return total.get(rowIndex);
    }
}
