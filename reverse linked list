第二次：
iterative:
不要多加cur，head足够了。注意prev初始化为Null,因为后面有head.next = prev的赋值，如果是prev=head,会指成循环。。你这个笨蛋
public class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null) return head;
        ListNode prev = null;
        ListNode tmp = null;
        while(head != null) {
            tmp = head.next;
            head.next = prev;
            prev = head;
            head = tmp;
        }
        return prev;
    }
}
recursive:
public class Solution {
    public ListNode reverseList(ListNode head) {
        return reverseListInt(head, null);
    }
    private ListNode reverseListInt(ListNode head, ListNode newHead) {
    if (head == null)
        return newHead;
    ListNode next = head.next;
    head.next = newHead;
    return reverseListInt(next, head);
}
}
第一次：
//iterative method:
实际上就是把list中的指针转向都改变。
记住转换的4步，这是固定的，记住保存current.next节点信息。记住check .next信息。记住最后返回的是prev，不是head....此时prev
已经在末尾了。cur指向了Null。

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: The new head of reversed linked list.
     */
    public ListNode reverse(ListNode head) {
        // write your code here
        if(head == null){
            return head;
        }
        
        ListNode prev = null;//prev point to null node. cannot be new ListNode(0), otherwise will return 0, 1. But there's no 0
        while(head != null){ //don't need head.next != null because head.next can be null. Then after this iteration, while will stop, return prev
            ListNode temp = head.next;//head is current node，保存cur.next信息。
            head.next = prev;//give prev a position， send it to head.next
            prev = head;//change pointer 
            head = temp;
        }
        return prev;
    }
}

//recursive method:
//mark first node and second node, thus the second node represents the rest of the list 
//recursively call reverse method on the rest of the list to reverse it,
// mark the last node of the original list when reverse method reaches the end
// after reverse method returns, point the second node to the first node, point the first node to null
不断的进入递归函数，直到head指向最后一个节点，p指向之前一个节点，然后调换head和p的位置，再返回上一层递归函数，再交换p和head的位置，
每次交换后，head节点后面都是交换好的顺序，直到p为首节点，然后再交换，首节点就成了为节点，此时整个链表也完成了翻转
draw a picture of list then make sense!!!
public class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode nextNode = head.next;
        ListNode newHead = reverseList(nextNode);
        nextNode.next = head;
        head.next = null;
        return newHead;
    }
}
