//iterative method:
实际上就是把list中的指针转向都改变。
记住转换的4步，这是固定的，记住保存current.next节点信息。记住check .next信息。记住最后返回的是prev，不是head....此时prev
已经在末尾了。cur指向了Null。

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: The new head of reversed linked list.
     */
    public ListNode reverse(ListNode head) {
        // write your code here
        if(head == null){
            return head;
        }
        
        ListNode prev = null;//prev point to null node. 
        while(head != null){ //don't need head.next != null because head.next can be null. Then after this iteration, while will stop, return prev
            ListNode temp = head.next;//head is current node，保存cur.next信息。
            head.next = prev;//give prev a position， send it to head.next
            prev = head;//change pointer 
            head = temp;
        }
        return prev;
    }
}

//recursive method:
//mark first node and second node, thus the second node represents the rest of the list 
//recursively call reverse method on the rest of the list to reverse it,
// mark the last node of the original list when reverse method reaches the end
// after reverse method returns, point the second node to the first node, point the first node to null
public ListNode reverseList(ListNode head) {
    if(head == null) return null;
    if(head.next == null) return head;
    ListNode rest = head.next;
    ListNode newhead = reverse(rest);
    rest.next = head;
    head.next = null;
    return newhead;
}
private ListNode reverse(ListNode rest){
    if(rest.next == null) return rest;
    ListNode newrest = rest.next;
    ListNode head = reverse(newrest);
    newrest.next = rest;
    return head;
}
