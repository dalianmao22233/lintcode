第二次：
 The idea is:
起始subset集为：[]
添加S0后为：[], [S0]
添加S1后为：[], [S0], [S1], [S0, S1]
添加S2后为：[], [S0], [S1], [S0, S1], [S2], [S0, S2], [S1, S2], [S0, S1, S2]
红色subset为每次新增的。显然规律为添加Si后，新增的subset为克隆现有的所有subset，并在它们后面都加上Si。
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> tmp = new ArrayList<Integer>();
        if(nums == null || nums.length == 0) return res;
        res.add(tmp);
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++) {
            
            int len = res.size();
            for(int j = 0; j < len; j++) {
                tmp = new ArrayList<Integer>(res.get(j));
                tmp.add(nums[i]);
                res.add(tmp);
            }
        }
        return res;
    }
}
第一次：
backtracking:

public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> sol = new ArrayList<>();
        view(res, sol, 0, nums);
        return res;
    }
    private void view(List<List<Integer>> res, List<Integer> sol, int level, int[] nums){
        //没有其他的判断条件，这是看子集个数，不是从最右看有多少个节点的那种题。
        //只能判断一下子集的大小是不是超过了数组的长度，不超过就加入res
        if(sol.size() <= nums.length){
            res.add(new ArrayList(sol));
        }
        for(int i = level; i < nums.length; i++){
            sol.add(nums[i]);
            view(res, sol, i+1, nums);
            sol.remove(sol.size()-1);
        }
    }
}
