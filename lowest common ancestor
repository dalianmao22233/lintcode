
第一种方法好想，come from LLJ。先遍历某一颗子树，from top to bottom, check if there is a node == target(A or B),如果存在，
那么返回true.这样，如果在同一个side上，那么再细分左右子树继续查找。如果不在，则LCA=root.

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
            if(root == null || root == A || root == B){
                return root;
            }
            boolean leftresultA = inleftSide(root.left, A);
            boolean leftresultB = inleftSide(root.left, B);
            if(leftresultA != leftresultB){//A and B on different sides
                return root;
            }
            else{
                if(leftresultA){//both A & B on the left side
                    return lowestCommonAncestor(root.left, A, B);
                } 
                else{//on the right side
                    return lowestCommonAncestor(root.right, A, B);
                }
            }
            
    }
    private boolean inleftSide (TreeNode node, TreeNode target){
        if(node == null){
            return false;
        }
        if(node == target){
            return true;
        }
        return inleftSide(node.left, target) || inleftSide(node.right, target);
    }
            
}



/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
            if(root == null || root == A || root == B || A == null || B == null){
                return root;//后面两个判断是我加的，也能过。
            }
            TreeNode left = lowestCommonAncestor(root.left, A, B);
            TreeNode right = lowestCommonAncestor(root.right, A, B);
            if(left != null && right != null){
                return root;
            }
            if(left != null){
                return left;
            }
            if(right != null){
                return right;
            }
            return null;
            
    }
            
}
