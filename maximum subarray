连续的数组元素相加求最大的和。如果一个和是变成负数了，那么肯定没什么用，就直接扔掉重新开始。其实是一个dp的想法。
第三次：好懂：
这道题在Amazon电面二的时候问到过，不过不是返回最大值，而是返回subarray。
这样的话我们要保存local和global的starting index以及length。 
Follow up是overflow或者underflow该怎么处理， throw ArithmeticException就可以了。
public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int maxsum = Integer.MIN_VALUE;
        int localsum = 0;
        for(Integer i: nums) {
            localsum += i;
            maxsum = Math.max(maxsum, localsum);
            if(localsum < 0) localsum = 0;//此时对于Maxsum没有用处，清零。而且也通过max()来保存了当前最大值。
        }
        return maxsum;
    }
}



第二次：
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A integer indicate the sum of max subarray
     */
    public int maxSubArray(int[] nums) {
        // write your code
        if(nums == null || nums.length == 0){
            return 0;
        }
        int[] sums = new int[nums.length];
        sums[0] = nums[0];
        int maxsum = sums[0];
        for(int i = 1; i < sums.length; i++){
            if(sums[i-1] < 0){
                sums[i] = nums[i];
            }
            else{
                sums[i] = sums[i-1] + nums[i];
            }
            maxsum = Math.max(maxsum, sums[i]);
        }
        return maxsum;
    }
}

-----zhanglin 空间复杂度O(1) 这是贪心！！！！！！
{
 int sum = nums[0];
        int maxv = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(sum <= 0){
                sum = nums[i];
            }
            else{
                sum += nums[i];
            }
            maxv = Math.max(sum, maxv);
        }
        return maxv;
}
// Version 1: Greedy

public class Solution {
    public int maxSubArray(int[] A) {
        if (A == null || A.length == 0){
            return 0;
        }
        
        int max = Integer.MIN_VALUE, sum = 0;
        for (int i = 0; i < A.length; i++) {
            sum += A[i];
            max = Math.max(max, sum);
            sum = Math.max(sum, 0);
        }

        return max;
    }
}
//version 2: DP 非常好的想法，minsum指index=i之前任意一段的最小和，比如i=5, 1-3之间的和是最小的=minsum。
那么sum-minsum得到的就是最大的那一段。
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A integer indicate the sum of max subarray
     */
    public int maxSubArray(int[] nums) {
        // write your code
        if(nums == null || nums.length == 0){
            return 0;
         }
        int minsum = 0;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            max = Math.max(sum - minsum, max);
            minsum = Math.min(minsum, sum);
        }
        return max;
    }
    
}

4. 我写的超时DP。。。
public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int m = nums.length;
        int max = Integer.MIN_VALUE;
        if(m == 1) {
            return nums[0];
        }
        
        int tmp_max = Integer.MIN_VALUE;
        int global_max = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            global_max = Math.max(global_max, nums[i]);
            for(int j = 0; j < i; j++){
                tmp_max = Math.max(tmp_max, range_sum(nums, j, i));
            }
        }
        int tmp_max2 = Integer.MIN_VALUE;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < i; j++){
                tmp_max2 = Math.max(Math.max(tmp_max, range_sum(nums, j, i-1)+nums[i]), global_max);
            }
            if(max < tmp_max2) max = tmp_max2;
        }
        
        return max;
        
    }
    public int range_sum(int[] nums, int start, int end) {
        int sum = 0;
        for(int i = start; i <= end; i++) {
            sum += nums[i];
        }
        return sum;
    }
}
