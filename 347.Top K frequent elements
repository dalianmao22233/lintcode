bucket sort: 超级快，好理解
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer>[] bucket = new List[nums.length + 1];
	Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>();

	for (int n : nums) {
		frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1);
	}

	for (int key : frequencyMap.keySet()) {
		int frequency = frequencyMap.get(key);
		if (bucket[frequency] == null) {
			bucket[frequency] = new ArrayList<>();
		}
		bucket[frequency].add(key);
	}

	List<Integer> res = new ArrayList<>();

	for (int pos = bucket.length - 1; pos >= 0 && res.size() < k; pos--) {
		if (bucket[pos] != null) {
			res.addAll(bucket[pos]);
		}
	}
   
    return res.subList(0,k); //注意这里不能return res, 因为Bucket的每一个元素都不知道具体长短，有可能会超过K。
    }
}
第一种：我的
class Pair{
    int num;
    int count;
    public Pair(int num, int count) {
        this.num = num;
        this.count = count;
    }
}
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<Integer>();
        if(nums == null || nums.length == 0) return res;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            if(map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i])+1);
            } else {
                map.put(nums[i], 1);
            }
        }
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(new Comparator<Pair>(){
            public int compare(Pair a, Pair b) {
                return a.count-b.count;
            }
        });
        for(Map.Entry<Integer, Integer> entry: map.entrySet()) {
            Pair p = new Pair(entry.getKey(), entry.getValue());
            pq.offer(p);
            if(pq.size() > k) {
                pq.poll();
            }
        }
        while(pq.size() > 0) {
            res.add(pq.poll().num);
        }
        Collections.reverse(res);
        return res;
    }
}
来自discussion的三种解法:
// use an array to save numbers into different bucket whose index is the frequency
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        
        // corner case: if there is only one number in nums, we need the bucket has index 1.
        List<Integer>[] bucket = new List[nums.length+1];
        for(int n:map.keySet()){
            int freq = map.get(n);
            if(bucket[freq]==null)
                bucket[freq] = new LinkedList<>();
            bucket[freq].add(n);
        }
        
        List<Integer> res = new LinkedList<>();
        for(int i=bucket.length-1; i>0 && k>0; --i){
            if(bucket[i]!=null){
                List<Integer> list = bucket[i]; 
                res.addAll(list);
                k-= list.size();
            }
        }
        
        return res;
    }
}



// use maxHeap. Put entry into maxHeap so we can always poll a number with largest frequency
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
           
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
                         new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            maxHeap.add(entry);
        }
        
        List<Integer> res = new ArrayList<>();
        while(res.size()<k){
            Map.Entry<Integer, Integer> entry = maxHeap.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}



// use treeMap. Use freqncy as the key so we can get all freqencies in order, 这个beats 72%
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res =new ArrayList<>();
        if(nums == null || k <= 0) return res;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i:nums) {
            map.put(i, map.getOrDefault(i, 0)+1);

        }
        TreeMap<Integer, List<Integer>> treemap = new TreeMap<>();
        for(int i: map.keySet()) {
            int freq = map.get(i);
            if(!treemap.containsKey(freq)) {
                treemap.put(freq, new LinkedList<>());
            }
            treemap.get(freq).add(i);
        }
        
        while(res.size()<k) {
            Map.Entry<Integer, List<Integer>> entry = treemap.pollLastEntry();//treemap get the max value (natural order)
            res.addAll(entry.getValue());
        }
        return res.subList(0, k);
    }
}
