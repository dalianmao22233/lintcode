同combinations,回溯+dfs
先sort数组。。 不sort也没关系，但是最好sort。约定俗成。
此题注意加上level的计数，不然会重复出现之前的结果，比如[2,2,3], [3,2,2] (target=7)
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length == 0) return res;
        Arrays.sort(candidates);
        helper(res, new ArrayList<Integer>(), candidates, target, 0);//从0开始，和combinations不一样，那个是1-n。这一位用来记录pos
        return res;
    }
    private void helper(List<List<Integer>> res, ArrayList<Integer> solution, int[] candidates, int target, int level) {
        if(target < 0) return;
        if(target == 0) {
            res.add(new ArrayList<Integer>(solution));
            return;//不写也行。
        }
        for(int i = level; i < candidates.length; i++) {
            // if(candidates[i] > target) break; //可以不写，会通过前面的if筛选掉
            if(i > 1 && candidates[i] == candidates[i-1]) continue; //i>1就是为了i-1的验证
            solution.add(candidates[i]);
            helper(res, solution, candidates, target-candidates[i], i);//不是i+1，因为这一位可以重复，和combinations不一样。
            solution.remove(solution.size()-1);
        }
    }
}
