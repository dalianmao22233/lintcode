第二次：搜索边界
注意搜索左边界时，遇到mid = target时我们hi = mid - 1，最后返回的边界index是lo。
搜索右边界时，遇到mid = target我们lo = mid + 1，最后返回的边界index是hi。
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0) return new int[]{0};
        int lo = 0, hi = nums.length-1;
        int[] res = {-1, -1}; //初始化，先写出这种情况。是没搜索到
        
        int mid = 0; 
        while(lo <= hi) {
            mid = lo+(hi-lo)/2;
            if(nums[mid] < target) {
                lo = mid+1;
            } else {
                hi = mid-1;
            }
        }
        System.out.println("left: lo: " + lo + ",hi: " + hi);
        int left = lo;
        lo = 0;
        hi = nums.length-1;
        while(lo <= hi) {
            mid = lo+(hi-lo)/2;
            if(nums[mid] <= target) {
                lo = mid+1;
            } else {
                hi = mid-1;
            }
        }
        System.out.println("right: lo: " + lo + ",hi: " + hi);
        int right = hi;
        if(left <= right) {
            res[0] = left;
            res[1] = right;
        }
        return res;
    }
}
Your input

[2,3,6,7,8,8,9]
8
Your stdout

left: lo: 4,hi: 3
right: lo: 6,hi: 5
Your answer

[4,5]

第一次：
public class Solution {
    public int[] searchRange(int[] A, int target) {
        if (A.length == 0) {
            return new int[]{-1, -1};
        }
        
        int start, end, mid;
        int[] bound = new int[2]; 
        
        // search for left bound
        start = 0; 
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] == target) {
            bound[0] = start;
        } else if (A[end] == target) {
            bound[0] = end;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        // search for right bound
        start = 0;
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                start = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[end] == target) {
            bound[1] = end;
        } else if (A[start] == target) {
            bound[1] = start;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        return bound;
    }
}
