第二次：
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        return helper(root.left, root.right);
    }
    public boolean helper(TreeNode A, TreeNode B) {
        if(A == null && B == null) return true;
        if(A == null || B == null) return false;
        
        if(A.val != B.val) return false;
        if(A.val == B.val)
            return helper(A.left, B.right) && helper(A.right, B.left);
        return false;
    }
}
第一次：
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root, the root of binary tree.
     * @return true if it is a mirror of itself, or false.
     */
    public boolean isSymmetric(TreeNode root) {
        // Write your code here
        if(root == null){
            return true;
        }
        return check(root.left, root.right);
        
    }
    private boolean check(TreeNode A, TreeNode B){
        if(A == null && B == null){
            return true;
        }
        if(A == null || B == null){
            return false;
        }
        if(A.val != B.val){//这里不能写A.val == B.val，如果写了，后面会跟else return false;
        //但是这样就永远走不到最后一个return，报错。如果！=，这样就说明A.val = B.val，有资格走
        //到最后的return，有资格检查再下一层的节点。
            return false;
        }
        
        return check(A.left, B.right) && check(A.right, B.left);
    }
}
