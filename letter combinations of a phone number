dfs+backtracking:
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0) return res;
        String[] map = new String[]{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        dfs(res, "", map, digits, 0);
        return res;
    }
    private void dfs(List<String> res, String sb, String[] map, String digits, int pos) {
        if(pos == digits.length()) {
            res.add(sb.toString());
            return;
        }
        int index = digits.charAt(pos) - '0';
        String letters = map[index];
        for(int i = 0; i < letters.length(); i++) {
            
            dfs(res, sb+letters.charAt(i), map, digits, pos+1);
           
        }
    }
}
用stringbuilder:
Time Complexity ~ O(3n), Space Compelxity - O(n);
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList();
        if(digits == null || digits.length() == 0)
            return res;
        StringBuilder sb = new StringBuilder();
        String[] map = {"", "","abc","def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        dfs(res, sb, digits, map, 0);
        return res;
    }
    
    private void dfs(List<String> res, StringBuilder sb, String digits, String[] map, int pos) {
        if(pos == digits.length()) {
            res.add(sb.toString());
            return;
        }  
        int num = digits.charAt(pos) - '0';
        String str = map[num];
        
        for(int i = 0; i < str.length(); i++) {
            sb.append(str.charAt(i));
            dfs(res, sb, digits, map, pos + 1);
            sb.deleteCharAt(sb.length() - 1); //一直不太懂为啥要这句。
        }
    }
}
