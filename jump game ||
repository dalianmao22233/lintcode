public class Solution {
    /**
     * @param A: A list of lists of integers
     * @return: An integer
     */
    public int jump(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return 0;
        }
        int[] steps = new int[A.length];
        steps[0] = 0;
        for (int i = 1; i < A.length; i++) {
            for (int j = 0; j < i; j++) {
                if ( A[j] >= i - j) {
                    steps[i] = steps[j] + 1;//compute the number of jump from j to i, not the exact jump length.
                    break;
                }
            }
        }
        
        return steps[A.length - 1];
    }
}
version2： greedy，使用两个指针start end
public class Solution {
    public int jump(int[] A) {
        if (A == null || A.length == 0) {
            return -1;
        }
        int start = 0, end = 0, jumps = 0;
        while (end < A.length - 1) {
            jumps++;
            int farthest = end;
            for (int i = start; i <= end; i++) {
                if (A[i] + i > farthest) {
                    farthest = A[i] + i;
                }
            }
            start = end + 1;//Re-allocate pointer position for start and end
            end = farthest;
        }
        return jumps;
    }
}
