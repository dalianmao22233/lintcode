后序+中序，和前序+中序相反。
第一种：
public class Solution {
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || inorder.length == 0) return null;
        if(postorder == null || postorder.length == 0) return null;
        int postEnd = postorder.length-1;
        return helper(inorder, postorder, inorder.length-1, 0, postEnd);
    }
    public TreeNode helper(int[] inorder, int[] postorder, int inStart, int inEnd, int postEnd) {
        if(postEnd < 0 || inEnd > inStart) return null;
        int inmid = 0;
        TreeNode root = new TreeNode(postorder[postEnd]);
        for(int i = inStart; i >= inEnd; i--) {
            if(inorder[i] == postorder[postEnd]) {
                inmid = i;
            }
        }
        
        root.left = helper(inorder, postorder, inmid-1, inEnd, postEnd-(inStart-inmid)-1);
        root.right = helper(inorder, postorder, inStart, inmid+1, postEnd-1);
        return root;
    }
}
第一种的变种：
public class Solution {
    private int findPosition(int[] arr, int start, int end, int key) {
        int i;
        for (i = start; i <= end; i++) {
            if (arr[i] == key) {
                return i;
            }
        }
        return -1;
    }

    private TreeNode myBuildTree(int[] inorder, int instart, int inend,
            int[] postorder, int poststart, int postend) {
        if (instart > inend) {
            return null;
        }

        TreeNode root = new TreeNode(postorder[postend]);
        int position = findPosition(inorder, instart, inend, postorder[postend]);

        root.left = myBuildTree(inorder, instart, position - 1,
                postorder, poststart, poststart + position - instart - 1);
        root.right = myBuildTree(inorder, position + 1, inend,
                postorder, poststart + position - instart, postend - 1);
        return root;
    }

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder.length != postorder.length) {
            return null;
        }
        return myBuildTree(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
    }
}
第二种：https://discuss.leetcode.com/topic/4746/my-comprehension-of-o-n-solution-from-hongzhi
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder == null || inorder.length < 1) return null;
        int i = inorder.length - 1;
        int p = i;
        TreeNode node;
        TreeNode root = new TreeNode(postorder[postorder.length - 1]);
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        p--;
        
        while (true) {
            if (inorder[i] == stack.peek().val) { // inorder[i] is on top of stack, pop stack to get its parent to get to left side
                if (--i < 0) break;
                node = stack.pop();
                if (!stack.isEmpty() && inorder[i] == stack.peek().val) {// continue pop stack to get to left side
                    continue;
                }
                node.left = new TreeNode(postorder[p]);
                stack.push(node.left);
            } else { // inorder[i] is not on top of stack, postorder[p] must be right child
                node = new TreeNode(postorder[p]);
                stack.peek().right = node;
                stack.push(node);
            }
            p--;
        }
        
        return root;
    }
}
