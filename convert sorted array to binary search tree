思想：找到中间位置，作为root，然后对于root.left, root.right重复这一步。
//注意：int mid = low + (high-low)/2; // avoids integer overflow
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums == null) return null;
        return helper(nums, 0, nums.length-1);
    }
    public TreeNode helper(int[] nums, int low, int high) {
        if(nums == null) return null;
        if(low > high) return null;
        int mid = low + (high-low)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = helper(nums, low, mid-1); //要给root的左右孩子分配结构。不要忘记左边。
        root.right = helper(nums, mid+1, high);
        return root;
        
    }
}
